{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "definitions": {
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource."
          }
        }
      },
      "nullable": true
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
            }
          },
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "networkAclsType": {
      "type": "object",
      "properties": {
        "resourceAccessRules": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string",
                "metadata": {
                  "description": "Required. The ID of the tenant in which the resource resides in."
                }
              },
              "resourceId": {
                "type": "string",
                "metadata": {
                  "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
          }
        },
        "bypass": {
          "type": "string",
          "allowedValues": [
            "AzureServices",
            "AzureServices, Logging",
            "AzureServices, Logging, Metrics",
            "AzureServices, Metrics",
            "Logging",
            "Logging, Metrics",
            "Metrics",
            "None"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
          }
        },
        "virtualNetworkRules": {
          "type": "array",
          "nullable": true,
          "metadata": {
            "description": "Optional. Sets the virtual network rules."
          }
        },
        "ipRules": {
          "type": "array",
          "nullable": true,
          "metadata": {
            "description": "Optional. Sets the IP ACL rules."
          }
        },
        "defaultAction": {
          "type": "string",
          "allowedValues": [
            "Allow",
            "Deny"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the default action of allow or deny when no other rules match."
          }
        }
      }
    },
    "privateEndpointType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private endpoint."
            }
          },
          "location": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The location to deploy the private endpoint to."
            }
          },
          "privateLinkServiceConnectionName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private link connection to create."
            }
          },
          "service": {
            "type": "string",
            "metadata": {
              "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\"."
            }
          },
          "subnetResourceId": {
            "type": "string",
            "metadata": {
              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
            }
          },
          "privateDnsZoneGroup": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The name of the Private DNS Zone Group."
                }
              },
              "privateDnsZoneGroupConfigs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group config."
                      }
                    },
                    "privateDnsZoneResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource id of the private DNS zone."
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The private DNS zone group to configure for the private endpoint."
            }
          },
          "isManualConnection": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. If Manual Private Link Connection is required."
            }
          },
          "manualConnectionRequestMessage": {
            "type": "string",
            "nullable": true,
            "maxLength": 140,
            "metadata": {
              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
            }
          },
          "customDnsConfigs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Required. Fqdn that resolves to private endpoint ip address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private ip addresses of the private endpoint."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Custom DNS configurations."
            }
          },
          "ipConfigurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private ip address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
            }
          },
          "applicationSecurityGroupResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
            }
          },
          "customNetworkInterfaceName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The custom name of the network interface attached to the private endpoint."
            }
          },
          "lock": {
            "$ref": "#/definitions/lockType",
            "metadata": {
              "description": "Optional. Specify the type of lock."
            }
          },
          "roleAssignments": {
            "$ref": "#/definitions/roleAssignmentType",
            "metadata": {
              "description": "Optional. Array of role assignments to create."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
            }
          },
          "enableTelemetry": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. Enable/Disable usage telemetry for module."
            }
          },
          "resourceGroupName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
            }
          }
        }
      },
      "nullable": true
    },
    "diagnosticSettingType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of diagnostic setting."
            }
          },
          "metricCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
            }
          },
          "logAnalyticsDestinationType": {
            "type": "string",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
            }
          },
          "workspaceResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "storageAccountResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "eventHubAuthorizationRuleResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
          },
          "eventHubName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "marketplacePartnerResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
            }
          }
        }
      },
      "nullable": true
    },
    "customerManagedKeyType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
          }
        },
        "keyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the customer managed key to use for encryption."
          }
        },
        "keyVersion": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
          }
        },
        "userAssignedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. User assigned identity to use when fetching the customer managed key. If used must also be specified in `managedIdentities.userAssignedResourceIds`. Required if no system assigned identity is available for use."
          }
        }
      },
      "nullable": true
    },
    "secretsExportConfigurationType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
          }
        },
        "accessKey1": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The accessKey1 secret name to create."
          }
        },
        "connectionString1": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The connectionString1 secret name to create."
          }
        },
        "accessKey2": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The accessKey2 secret name to create."
          }
        },
        "connectionString2": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The connectionString2 secret name to create."
          }
        }
      }
    },
    "secretsOutputType": {
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "$ref": "#/definitions/secretSetType",
        "metadata": {
          "description": "An exported secret's references."
        }
      }
    },
    "secretSetType": {
      "type": "object",
      "properties": {
        "secretResourceId": {
          "type": "string",
          "metadata": {
            "description": "The resourceId of the exported secret."
          }
        },
        "secretUri": {
          "type": "string",
          "metadata": {
            "description": "The secret URI of the exported secret."
          }
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 24,
      "metadata": {
        "description": "Required. Name of the Storage Account. Must be lower-case."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentitiesType",
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "kind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "Storage",
        "StorageV2",
        "BlobStorage",
        "FileStorage",
        "BlockBlobStorage"
      ],
      "metadata": {
        "description": "Optional. Type of Storage Account to create."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard_GRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ],
      "metadata": {
        "description": "Optional. Storage Account Sku Name."
      }
    },
    "accessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Premium",
        "Hot",
        "Cool"
      ],
      "metadata": {
        "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
      }
    },
    "largeFileSharesState": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Optional. Allow large file shares if sets to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
      }
    },
    "azureFilesIdentityBasedAuthentication": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Provides the identity based authentication settings for Azure Files."
      }
    },
    "defaultToOAuthAuthentication": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
      }
    },
    "allowSharedKeyAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
      }
    },
    "privateEndpoints": {
      "$ref": "#/definitions/privateEndpointType",
      "metadata": {
        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
      }
    },
    "managementPolicyRules": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. The Storage Account ManagementPolicies Rules."
      }
    },
    "networkAcls": {
      "$ref": "#/definitions/networkAclsType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
      }
    },
    "requireInfrastructureEncryption": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
      }
    },
    "allowCrossTenantReplication": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Allow or disallow cross AAD tenant object replication."
      }
    },
    "customDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
      }
    },
    "customDomainUseSubDomainName": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
      }
    },
    "dnsEndpointType": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "AzureDnsZone",
        "Standard"
      ],
      "metadata": {
        "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
      }
    },
    "blobServices": {
      "type": "object",
      "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
      "metadata": {
        "description": "Optional. Blob service and containers to deploy."
      }
    },
    "fileServices": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. File service and shares to deploy."
      }
    },
    "queueServices": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Queue service and queues to create."
      }
    },
    "tableServices": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Table service and tables to create."
      }
    },
    "allowBlobPublicAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
      }
    },
    "minimumTlsVersion": {
      "type": "string",
      "defaultValue": "TLS1_2",
      "allowedValues": [
        "TLS1_2",
        "TLS1_3"
      ],
      "metadata": {
        "description": "Optional. Set the minimum TLS version on request to storage. The TLS versions 1.0 and 1.1 are deprecated and not supported anymore."
      }
    },
    "enableHierarchicalNamespace": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
      }
    },
    "enableSftp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
      }
    },
    "localUsers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Local users to deploy for SFTP authentication."
      }
    },
    "isLocalUserEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables local users feature, if set to true."
      }
    },
    "enableNfsV3": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
      }
    },
    "diagnosticSettings": {
      "$ref": "#/definitions/diagnosticSettingType",
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "allowedCopyScope": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "AAD",
        "PrivateLink"
      ],
      "metadata": {
        "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
      }
    },
    "supportsHttpsTrafficOnly": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
      }
    },
    "customerManagedKey": {
      "$ref": "#/definitions/customerManagedKeyType",
      "metadata": {
        "description": "Optional. The customer managed key definition."
      }
    },
    "sasExpirationPeriod": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
      }
    },
    "keyType": {
      "type": "string",
      "nullable": true,
      "allowedValues": [
        "Account",
        "Service"
      ],
      "metadata": {
        "description": "Optional. The keyType to use with Queue & Table services."
      }
    },
    "secretsExportConfiguration": {
      "$ref": "#/definitions/secretsExportConfigurationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Key vault reference and secret settings for the module's secrets export."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        // "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
    "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
    // "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    // "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
      "Storage File Data Privileged Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
      "Storage File Data Privileged Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b8eda974-7b85-4f76-af95-65846b26df6d')]",
      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "storageAccount": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "kind": "[parameters('kind')]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      // "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
        "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
        "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
        "allowedCopyScope": "[if(not(empty(parameters('allowedCopyScope'))), parameters('allowedCopyScope'), null())]",
        "customDomain": {
          "name": "[parameters('customDomainName')]",
          "useSubDomainName": "[parameters('customDomainUseSubDomainName')]"
        },
        "dnsEndpointType": "[if(not(empty(parameters('dnsEndpointType'))), parameters('dnsEndpointType'), null())]",
        "isLocalUserEnabled": "[parameters('isLocalUserEnabled')]",
        "accessTier": "[if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null())]",
        "sasPolicy": "[if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null())]",
        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
        "isHnsEnabled": "[parameters('enableHierarchicalNamespace')]",
        "isSftpEnabled": "[parameters('enableSftp')]",
        "isNfsV3Enabled": "[if(parameters('enableNfsV3'), parameters('enableNfsV3'), '')]",
        "largeFileSharesState": "[if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null())]",
        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
        // "networkAcls": "[if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny'))]",
        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
      }
    }
  },
  "outputs": {
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed storage account."
      },
      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed storage account."
      },
      "value": "[parameters('name')]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the deployed storage account."
      },
      "value": "[resourceGroup().name]"
    },
    "primaryBlobEndpoint": {
      "type": "string",
      "metadata": {
        "description": "The primary blob endpoint reference if blob services are deployed."
      },
      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
    },
    /*"systemAssignedMIPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[coalesce(tryGet(tryGet(reference('storageAccount', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
    },*/
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('storageAccount', '2023-05-01', 'full').location]"
    },
    "serviceEndpoints": {
      "type": "object",
      "metadata": {
        "description": "All service endpoints of the deployed storage account, Note Standard_LRS and Standard_ZRS accounts only have a blob service endpoint."
      },
      "value": "[reference('storageAccount').primaryEndpoints]"
    },
    "privateEndpoints": {
      "type": "array",
      "metadata": {
        "description": "The private endpoints of the Storage Account."
      },
      "copy": {
        "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
        "input": {
          "name": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
          "resourceId": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
          "groupId": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
          "customDnsConfig": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
          "networkInterfaceIds": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
        }
      }
    }
    /*"exportedSecrets": {
      "$ref": "#/definitions/secretsOutputType",
      "metadata": {
        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
      },
      "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
    }*/
  }
}
