{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "languageVersion": "2.0",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.30.23.60470",
        "templateHash": "7109049210516898074"
      },
      "name": "Storage Accounts",
      "description": "This module deploys a Storage Account.",
      "owner": "Azure/module-maintainers"
    },
    "definitions": {
      "customerManagedKeyType": {
          "type": "object",
          "properties": {
              "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                      "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
              },
              "keyName": {
                  "type": "string",
                  "metadata": {
                      "description": "Required. The name of the customer managed key to use for encryption."
                  }
              },
              "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                      "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
              },
              "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                      "description": "Optional. User assigned identity to use when fetching the customer managed key. If used must also be specified in `managedIdentities.userAssignedResourceIds`. Required if no system assigned identity is available for use."
                  }
              }
          },
          "nullable": true
      }  
    },
    "parameters": {
      "name": {
        "type": "string",
        "maxLength": 24,
        "metadata": {
          "description": "Required. Name of the storage account. Must be lower case."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Optional. Location for all resources."
        }
      },
      "kind": {
        "type": "string",
        "defaultValue": "StorageV2",
        "allowedValues": [
          "Storage",
          "StorageV2",
          "BlobStorage",
          "FileStorage",
          "BlockBlobStorage"
        ],
        "metadata": {
          "description": "Optional. Type of storage account to create."
        }
      },
      "skuName": {
        "type": "string",
        "defaultValue": "Standard_GRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS",
          "Standard_ZRS",
          "Standard_GZRS",
          "Standard_RAGZRS",
          "Premium_LRS",
          "Premium_ZRS"
        ],
        "metadata": {
          "description": "Optional. Storage account sku name."
        }
      },
      "supportsHttpsTrafficOnly": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Optional. Allow HTTPS traffic only to storage service if sets to true."
        }
      },
      "customerManagedKey": {
          "$ref": "#/definitions/customerManagedKeyType",
          "metadata": {
              "description": "Optional. The customer managed key definition."
          }
      },
      "keyType": {
          "type": "string",
          "nullable": true,
          "allowedValues": [
              "Account",
              "Service"
          ],
          "metadata": {
              "description": "Optional. The keyType to use with Queue & Table services."
          }
      },
      "requireInfrastructureEncryption": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
          }
      }
    },
    "resources": {
        "cMKKeyVault::cMKKey": {
            "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
            "existing": true,
            "type": "Microsoft.KeyVault/vaults/keys",
            "apiVersion": "2023-02-01",
            "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
            "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
            "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
            "dependsOn": [
                "cMKKeyVault"
            ]
        },
        "cMKKeyVault": {
            "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
            "existing": true,
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2023-02-01",
            "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
            "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
            "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
        },
        "storageAccount": {
          "type": "Microsoft.Storage/storageAccounts",
          "apiVersion": "2023-04-01",
          "name": "[parameters('name')]",
          "location": "[parameters('location')]",
          "kind": "[parameters('kind')]",
          "sku": {
            "name": "[parameters('skuName')]"
          },
          "properties": {
            "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
            "encryption": "[union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/')))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject()))]"
          },
          "dependsOn": [
              "cMKKeyVault"
          ]
        }
     },
    "variables": {
      "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
      "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]"
    },
    "outputs": {}
}
